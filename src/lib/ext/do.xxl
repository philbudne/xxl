// -*-js-*-

var __doc = """
EXTENSION: `do { ... } while (cond);` and
           `do { ... } until (cond);`
""";

var __extend_parser = function (p) {
    var Do = Class.new({
	name: "Do",
	supers: [p.Stmt],
	methods: {
	    std: function (this) {	// parse as statement
		this.first = p.block();
		if (p.check("while")) {
		    p.reserve();
		    p.advance("while");
		    this.third = true;
		}
		else if (p.check("until")) {
		    p.reserve();
		    p.advance("until");
		    this.third = false;
		}
		else {
		    p.ctoken().error("in 'do' expecting 'while' or 'until'");
		}
		p.advance("(");
		this.second = p.expression(0);
		p.advance(")");
		p.advance(";");
		this.arity = "statement";
		return(this);
	    },
	    gen: function (this, vmcode) { // gen
		var top_label = vmcode.get_off();
		this.first.gen(vmcode);  // block
		this.second.gen(vmcode); // condition
		if (this.third) {
		    vmcode.emit_iftrue(top_label, this); // while
		}
		else {
		    vmcode.emit_ifnot(top_label, this); // until
		}
	    }
	}
    });
    p.add_symbol_class("do", Do);
};
