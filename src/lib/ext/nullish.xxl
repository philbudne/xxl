// -*-js-*-

var __doc = """
Implement JavaScript "Nullish coalescing operator" `??`,
"Logical nullish assignment" `??=`, and
"Optional chaining" `?.` operators
in XXL.
""";

const _classes = __xxl.import("classes");

_classes.Object.is_nullish = false;
_classes.Null.is_nullish = _classes.Undefined.is_nullish = true;

var __extend_parser = function (p) {
    var push_thunk = function (vmcode, node) {
	"""
	create a thunk (closure) to evaluate node; push on stack
	"""
	var nodecode = p.VMCode.new();
	// create scope???
	node.gen(nodecode);
	vmcode.emit_close(nodecode.finish(node), node); // create closure
	vmcode.emit_push(node); // push closure
    };

    ////////////////
    // "Nullish coalescing operator" `??`

    // a "special form" a binop that passes a closure for RHS
    // (only evaluates RHS if LHS is nullish)

    p.Nullish = Class.new({
	name: "Nullish",
	supers: [p.InfixR],
	methods: {
	    gen: function (this, vmcode) {
		push_thunk(vmcode, this.second);
		this.first.gen(vmcode);
		vmcode.emit_binop("??", this);
	    }
	}
    });
    p.Nullish.lbp = p.PLOR;
    p.add_symbol_class("??", p.Nullish);

    // a special form: passes thunk for RHS!!
    _classes.Object.__binops["??"] = function (l, rfun) {
	return(l.is_nullish ? rfun() : l);
    };

    ////////////////
    // "Logical nullish assignment" `??=`

    // NOTE! Always performs assignment.
    p.NullishAssign = Class.new({
	name: "NullishAssign",
	supers: [p.Assign],
	methods: {
	    gen: function (this, vmcode) {
		// XXX eval children of LHS once?
		push_thunk(vmcode, this.second); // RHS thunk !!!
		this.first.gen(vmcode);		// LHS value
		vmcode.emit_binop("??", this);
		this.first.gen_lhs(vmcode);	// store in LHS
	    }
	}
    });
    p.add_symbol_class("??=", p.NullishAssign);

    ////////////////
    // "Optional chaining" `?.` operator

    p.NullishDot = Class.new({
	name: "NullishDot",
	supers: [p.Dot]
    });
    p.NullishDot.lvalue = false;
    p.add_symbol_class("?.", p.NullishDot);

    _classes.Object.__binops["?."] = function (l, r) {
	"""
	like `l.r`, but guards against nullish values
	and returns `undefined`.
	"""
	return(l.is_nullish ? undefined : l.getprop(r));
    };
}; // __extend_parser

__extend_parser(__modinfo.parser); // required to parse test code below

if (__modinfo.main) {
    var try = function (x, y) {
	__xxl.print(x ?? y);

	__xxl.print(x ??= y);	// should return value
	__xxl.print(x);		// and set variable
    };

    try(null, "null is nullish");
    try(undefined, "undefined is nullish");

    // things that are normally "falsey"
    try(false, "ERROR");
    try(0, "ERROR");

    // things that always "truthy"
    try(1, "ERROR");
    try(true, "ERROR");
    try("str", "ERROR");

    try(null?.zzz, "null?.something is nullish");
    try(undefined?.zzz, "undefined?.something is nullish");

    // make sure it's the right kind of nullish!
    if (null?.zzz !== undefined) {
	__xxl.print("ERROR: null?.something !== undefined");
    }
    if (undefined?.zzz !== undefined) {
	__xxl.print("ERROR: undefined?.something !== undefined");
    }
}
