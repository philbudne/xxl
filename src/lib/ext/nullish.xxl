// -*-js-*-

var __doc = """
Implement JavaScript "Nullish coalescing operator" `??`,
Logical nullish assignment" `??=`, and
"Optional chaining" `?.` operators
in XXL.
""";

const _classes = __xxl.import("classes");

var __extend_parser = function (p) {
    // "ordinary" infix operator (implemented by a method)
    // NOTE! Both values are evaluated.
    // See "OrIf" class in parser.xxl for how to implement short-circuit.
    // *BUT* would need to implement ??= as well.
    p.Nullish = Class.new({
	name: "Nullish",
	supers: [p.InfixR],
    });
    p.Nullish.lbp = p.PLOR;
    p.add_symbol_class("??", p.Nullish);

    _classes.Object.__binops["??"] = function (l, r) {
	return(l.is_nullish ? r : l); // see const.NULLISH
    };

    // NOTE!!! Always does assignment!
    p.add_assignop("AssignNullish",  "??=", "??");

    p.NullishDot = Class.new({
	name: "NullishDot",
	supers: [p.Dot]
    });
    p.NullishDot.lvalue = false;
    p.add_symbol_class("?.", p.NullishDot);

    _classes.Object.__binops["?."] = function (l, r) {
	"""
	like `l.r`, but guards against nullish values
	and returns `undefined`.
	"""
	return((l.is_nullish) ? undefined : l.getprop(r));
    };
}; // __extend_parser

__extend_parser(__modinfo.parser); // required to parse test code below

if (__modinfo.main) {
    var try = function (x, y) {
	__xxl.print(x ?? y);

	__xxl.print(x ??= y);	// should return value
	__xxl.print(x);		// and set variable
    };

    try(null, "null is nullish");
    try(undefined, "undefined is nullish");

    // things that are normally "falsey"
    try(false, "ERROR");
    try(0, "ERROR");

    // things that always "truthy"
    try(true, "ERROR");
    try(1, "ERROR");

    try(null?.zzz, "null?.something is nullish");
    try(undefined?.zzz, "undefined?.something is nullish");
}
