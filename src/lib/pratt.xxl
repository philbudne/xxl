// not -*-js-*- ("it's only a model") but edit like it is.
// Extensible Pratt parser
// Blame: Phil Budne <phil _at_ regressive.org>

// Changes Copyright Â© 2021,2023 Philip L. Budne

// See parser.xxl for extensive top commentary

////////////////
// Adapted from:
//  parse.js
//  Parser for Simplified JavaScript written in Simplified JavaScript
//  From Top Down Operator Precedence
//  http://crockford.com/javascript/tdop/tdop.html
//  https://github.com/douglascrockford/TDOP
//  Douglas Crockford
//  2021-05-04
//  Public Domain
//
//  "This program makes frequent use of 'this' because I wrote it when I was young and foolish."
////////////////

const classes = __xxl.import("classes"); // SingletonClass

const VMCode = __xxl.import("vmcode.vmx").VMCode;

var PrattParser = Class.new({
    name: "PrattParser",
    methods: {
	add_symbol_class: function (this, str, symbol_class) {
	    """
	    Add an operator or statement Symbol class to parser.
	    """
	    // XXX assert symbol_class.instance_of(this.Symbol) ??
	    // XXX assert str.instance_of("".getclass()) ????
	    this.symbol_classes[str] = symbol_class;
	},

	start_parse: function (this, fname, prefix, suffix, fatal) {
	    // XXX take error handler/callback/continuation!
	    this.scope = this.Scope.new(null);

	    var ret = __xxl._tokenizer(fname, prefix, suffix);
	    this.get_token = ret[0]; // Object w/ type, value & where properties
	    this.reset_prompt = ret[1]; // void function
	    this.pointer = ret[2]; // func(line,pos); prints line w/ pointer
	    this.interactive = ret[3]; // bool
	    this.reset_tokenizer = ret[4]; // void function

	    this._fatal = fatal || function () { __xxl.exit(1); };

	    this._token = null;	// current Symbol object
	    this.need_advance = true; // pump needs priming
	},

	_msg: function (this, where, prefix, token, msg) {
	    __xxl.error(where, prefix, msg, token.repr()); // to stderr
	    var l = where.split(':');
	    if (l.len() >= 3) {
		// XXX check fname??
		this.pointer(l[1].to_int(), l[2].to_int());
	    }
	},
	_error: function (this, where, token, msg) {
	    """Internal helper to format fatal error message."""
	    this._msg(where, "ERROR", token, msg);
	    this._fatal();	// call error handler (default is exit(1))
	},
	_warning: function(this, where, token, msg) {
	    """Internal helper to format warning message."""
	    this._msg(where, "WARNING", token, msg);
	},
	_t_error: function(this, t, msg) {
	    """Token error (for _gtok); `t` is a token from tokenizer."""
	    this._error(t.where, t.value, msg);
	    // NOTREACHED
	},
	_gtok: function (this) {
	    """
	    Internal helper: fetch next token, and create Symbol object.
	    Parse routines should call ctoken, check, peek, advance.
	    """
	    var t = this.get_token(); // get lexer token
	    var v = t.value;
	    var a = t.type; // arity (name,number,string,operator,EOF,ERROR)
	    var c;	    // class
	    var d;	    // definition (for name)
	    // var id = v;
	    if (a == "name") {
		if ((d = this.scope.find_definition(v))) { // previously seen?
		    c = d.getclass(); // could be variable or reserved word
		}
		else if (!(c = this.symbol_classes[v])) { // keyword?
		    // not a keyword and not (yet) defined as a variable.
		    // property/method names (that aren't variable names)
		    // end up here.
		    c = this.Symbol; // undefined error on reference in expr!!
		}
	    }
	    else if (a == "operator") {
		c = this.symbol_classes[v];
		if (!c) {
		    this._t_error(t, "Unknown operator");
		}
	    }
	    else if (a == "string" || a == "number") {
		c = this.Lit;
		a = "literal";
		// id = this.LIT;
	    }
	    else if (a == "EOF") {
		c = this.End;	// a SingletonClass!
		v = this.END;	// for advance(this.END)
	    }
	    else if (a == "ERROR") {
		this._t_error(t, t.msg);
	    }
	    else {
		this._t_error(t, "Unknown token type " + a);
	    }
	    var s = c.new(t.where, v, a); // Symbol
	    s.defn = d;	   // save to avoid repeating lookup in define
	    return(s);
	}, // _gtok

	ctoken: function (this) {
	    """
	    Return current token (Symbol).

	    Check if deferred advance needed, and fetch new token if needed
	    (was originally "check_advance", vs "cash_advance?!").
	    Advance no longer reads next token;
	     just marks new token is needed via need_advance,
	     so interactive REPL doesn't hang at end of stmt.
	    """
	    if (this.need_advance) {
		this.advance();
	    }
	    return(this._token);
	}, // ctoken

	check: function (this, id) {
	    """
	    Return `true` if Str `id` matches current token
	    (handles deferred advance).
	    """
	    return(this.ctoken().check(id));
	}, // check

	advance: function (this, id) {
	    """
	    Checks that current token matches optional Str `id`.
	    If need_advance is false, just set flag and return
	     so that REPL doesn't hang on `advance(";")`
	    """
	    if (id && !this.check(id)) { // ctoken will call us w/ null id!
		this._token.error("Expected " + id.repr() + " saw");
	    }
	    if (!this.need_advance) {
		this.need_advance = true; // defer, defer!!
		return();
	    }
	    if (this._next_token) { // saved from peek?
		this._token = this._next_token;
		this._next_token = null; // consume it
	    }
	    else {
		this._token = this._gtok();
	    }
	    this.need_advance = false;
	},
	peek: function (this) {	// peek at token after this._token
	    // you can only peek one token ahead!
	    if (!this._next_token) {
		this._next_token = this._gtok();
	    }
	    return(this._next_token);
	},

	_defname: function(this, where, name, arity, read_only) {
	    """
	    helper to define `name` in current scope.
	    """
	    var class = read_only ? this.ReadOnly : this.Name;
	    this.scope._define(class.new(where, name, arity));
	},

	_defname_internal: function(this, where, name, read_only) {
	    """
	    define `name` (arrived at w/o a Symbol) in current scope.

	    NOTE!!! Does NOT check for multiple definitions or "shadowing"
	    so ****NOT for use with user symbols***!!!
	    """
	    this._defname(where, name, "name", read_only);
	},

	define: function (this, sym, read_only) {
	    """
	    `sym` is a Parser Symbol instance.
	    declare as a Name/ReadOnly in the current scope.
	    """

	    // had a call to scope.find_definition to get "prev" here.
	    // sym.defn _seems_ like the right thing!

	    // give fatal error for duplicate (in same scope) before warning!
	    this._defname(sym.where, sym.value, sym.arity, read_only);

	    if (sym.defn) {	// previous definition in an outer scope
		sym.warning("shadows previous definition at " + sym.defn.where);
	    }
	},

	predef: function (this, name, read_only) {
	    """predefine Str `name` as a Name or ReadOnly"""
	    this._defname_internal("predefined", name, read_only);
	},

	reserve: function (this, token) {
	    """mark `token` (defaults to `Parser.ctoken()`) as reserved"""
	    this.scope.reserve(token || this.ctoken());
	},

	expression: function (this, rbp) {
	    var t = this.ctoken();
	    this.advance();
	    var left = t.nud();
	    while (rbp < (t = this.ctoken()).lbp) {
		this.advance();
		left = t.led(left);
	    }
	    return(left);
	}, // expression

	check_end: function (this) {
	    """
	    Check for EOF token. Called from bootstrap reader loop.
	    """
	    return(this.ctoken().eof); // see also check_end_block
	},

	check_end_block: function (this) {
	    """
	    Check for end of block or EOF token. Called from statements loop.
	    """
	    var t = this.ctoken();
	    return(t.end_block || t.eof); // see also check_end
	},

	statement_error: function (this, handler) {
	    """
	    Parse statement w/ error handler for REPL.
	    calls handler, or returns null on parse error.
	    """
	    // If local cleanup desired, and no handler, could save "return"
	    // in a var and create a closure that calls it after cleanup??

	    // thought about saving old _fatal, and resetting afterwards
	    // (which could use the aforementioned closure
	    // to restore the old value on an error).
	    this._fatal = handler || return;
	    return(this.statement());
	},

	statement: function (this, labeled) {
	    """
	    Parse a single statement: called from bootstrap reader loop.
	    """
	    var n = this.ctoken();
	    if (n.arity == "name") { // possible label name?
		var next = this.peek(); // peek at next token
		if (next.check(":")) {
		    // will be defined inside of a new scope (closure)
		    if (n.reserved) {
			n.error(n.value.repr() + ' reserved');
		    }
		    if (labeled) { // nested labels?
			n.error("Statement already labeled");
		    }
		    var nn = this.Label.new(n.where, n.value, "name");
		    nn.std();	// call Label.std (which calls this function)
		    return(nn);
		} // peek == ":"
	    } // name
	    var std = n.std;
	    if (std) {
		this.advance();
		this.reserve(n);
		return(std());
	    }
	    return(this.expression_statement());
	}, // statement

	expression_statement: function (this) {
	    var v = this.expression(0);
	    if (!this.interactive && !v.exp_stmt) {
		v.error("Bad expression statement");
	    }
	    this.advance(";");
	    return(v);
	}, // expression_statement

	init: function (this_parser) {
	    var p = this_parser; // brevity, "this" clarity

	    p.VMCode = VMCode; // for use by extensions

	    p.symbol_classes = {}; // string to Symbol subclass

	    // defined inside class initializer so it can be overridden
	    // by subclasses of Parser.
	    p.Scope = Class.new({
		name: "Scope",
		methods: {
		    init: function (this, parent) {
			// dictionary of Symbol instances
			this.def = {};
			this.parent = parent;
		    },
		    _define: function (this, n) { // n is Symbol instance
			var t = this.def[n.value];
			if (t) { // previously defined in this scope??
			    n.error((t.reserved
				     ? "Reserved at "
				     : "Previously defined at ")
				    + t.where);
			}
			this.def[n.value] = n;
			n.reserved = false;
		    },
		    find_definition: function (this, n) {
			// n is Str (from lexer)
			// returns definition, if any (Symbol instance)
			var e = this;
			while (e) {
			    var o = e.def[n];
			    if (o) {
				return(o);
			    }
			    e = e.parent;
			}
			return(null);
		    },
		    pop: function (this) {
			"""
			Discard top scope.
			Returns old scope (new current scope)
			"""
			return(this.parent);
		    },
		    reserve: function (this, sym) {
			"""
			Mark name used as a keyword as reserved
			cannot be used as variable in this (or any nested scope).
			"""
			if (sym.arity != "name" || sym.reserved) {
			    return();
			}
			// NOTE!! In original (JavaScript) parser,
			// scope was per-function, and original code
			// was "var t = this.def[sym.value];"
			// BUT, XXL scope is per-block
			// (and there isn't CURRENTLY a way to only search
			//  to start of current function scope see comment
			//  on Scope.new in Function.nud method)
			//
			// 2021-06-17 Trying to avoid calling find_definition
			//  again by having _gtok stash lookup used to create
			//  Symbol in sym.defn.
			var t = sym.defn;
			if (t) {
			    if (t.reserved) {
				return();
			    }
			    if (t.arity == "name") {
				// here with an operator keyword previously
				// used as an identifier??
				sym.error("Defined at " + t.where);
			    }
			} // t
			this.def[sym.value] = sym;
			sym.reserved = true;
		    } // reserve
		} // methods
	    }); // Scope

	    ////////////////
	    // Parser Symbol (token) classes

	    // defined inside class initializer so it can be overridden
	    // by subclasses of Parser, AND so that Symbol class methods
	    // have access to the parser object (as "p"), but this could
	    // be done by explicitly passing the parser object to the
	    // nud/led/std methods.

	    // Maybe have a method that defines Symbol class, and each subclass
	    // to make it easier to subclass a Symbol before it's used to
	    // as a base class??

	    // Each class defined as a Class member, since used as base Class
	    // for other Classes defined in this init method, and in extensions!!

	    // Symbol nodes created for (as yet) undeclared identifiers.
	    p.Symbol = Class.new({
		name: "Symbol",
		doc: "Base class for parser AST nodes.",
		methods: {
		    init: function (this, where, value, arity) {
			this.where = where; // fname:line:charnum
			this.value = value; // Str or Number
			this.arity = arity; // "operator", "name", "literal"
			// XXX set reserved??
		    },
		    check: function (this, value) {
			"""check if symbol matches `value`"""
			// .id field originally existed w/ same value as .value
			// EXCEPT was "(literal)" for literals
			// NOTE: Lit.check always returns false.
			return(this.value == value);
		    },
		    nud: function (this) {
			"""
			"null denotation"
			invoked by parser at the start of an expression.
			"""
			this.error(this.arity == "name" ?
				   "Undefined symbol" : "Unexpected token");
		    },
		    led: function (this, ignore) {
			"""
			"left denotation" -- invoked by expression when there is
			context to the left of this symbol, honoring
			`.lbp` (left binding power) property.
			"""
			this.error("Missing operator");
		    },
		    error: function (this, msg) {
			"""
			Output a fatal error displaying token location and value.
			"""
			p._error(this.where, this.value, msg);
			// NOTREACHED
		    },
		    warning: function (this, msg) {
			"""
			Output a warning displaying token location and value .
			"""
			p._warning(this.where, this.value, msg);
		    },
		    gen: function (this, vmcode) {
			// XXX call gen_XXX based on this.arity???
			this.error("No gen function"); // XXX show class name??
		    }
		}, // methods
		props: {
		    lbp: 0
		}
	    }); // Symbol

	    p.Name = Class.new({
		name: "Name",
		supers: [p.Symbol],
		methods: {
		    nud: function (this) {
			return(this);
		    },
		    gen: function (this, vmcode) {
			vmcode.emit_load(this.value, this);
		    },
		    gen_lhs: function (this, vmcode) {
			vmcode.emit_store(this.value, this);
		    }
		}, // methods
		props: {
		    lvalue: true
		}
	    });

	    p.ReadOnly = Class.new({ // not named Const -- keep that for Stmt
		name: "ReadOnly",
		supers: [p.Name],
		methods: {
		    gen_lhs: function (this, vmcode) {
			// paranoia
			this.error("Should not happen (ReadOnly on LHS)");
		    }
		},
		props: {
		    lvalue: false // override from Name (make illegal on LHS)
		}
	    });

	    p.Lit = Class.new({
		name: "Lit",
		supers: [p.Symbol],
		methods: {
		    check: function (this, value) {
			"""Lit never matches in 'check' or 'advance'."""
			return(false);
		    },
		    nud: function (this) {
			// reserve only works for arity == "name", and
			// should only be here with arity == "literal"!!!
			p.reserve(this);
			return(this);
		    },
		    gen: function (this, vmcode) {
			vmcode.emit_lit(this.value, this);
		    } // gen
		} // methods
	    });

	    // pseudo-symbol for EOF
	    p.End = classes.SingletonClass.new({
		name: "End",
		supers: [p.Symbol],
		methods: {
		    nud: function (this) { return(this); }
		},
		props: {
		    end_block: true,
		    eof: true
		}
	    });
//	    p.End.end_block = true; // Class property
//	    p.End.eof = true;	    // Class property

	    p.END = "(EOF)";	// .value for End Symbol

	    //////////////// operator Symbol base classes

	    // Left associative infix (also base for InfixR)
	    p.Infix = Class.new({
		name: "Infix",
		supers: [p.Symbol],
		methods: {
		    led: function (this, left) {
			this.first = left;
			var rbp = this.lbp - this.right_assoc;
			this.second = p.expression(rbp);
			this.arity = "binary";
			return(this);
		    },
		    gen_infix: function (this, vmcode) {
			if (this.second.arity == "literal") {
			    this.first.gen(vmcode);
			    vmcode.emit_binop_lit(this.value, this.second.value, this);
			}
			else { // second NOT a Lit
			    vmcode.gen_push(this.second); // just push?
			    this.first.gen(vmcode);
			    vmcode.emit_binop(this.value, this);
			}
		    },
		    gen: function (this, vmcode) {
			// XXX have top level call gen_XXX based on arity?
			this.gen_infix(vmcode);
		    }
		}, // methods
		props: {
		    right_assoc: 0 // false: used in math
		}
	    });

	    // Right associative infix
	    p.InfixR = Class.new({
		name: "InfixR",
		supers: [p.Infix],
		props: {
		    right_assoc: 1 // true: used in math
		}
	    });

	} // init method
    } // methods
}); // PrattParser
