// -*-js-*-

// The pre-compiled version of this file (bootstrap.vmx) is loaded
// into every new module namespace.

// Parses and executes source file (if any) one line at a time so that
// parser extensions are available as soon as they are added!!

if (true) {			// hide temp variables
    System.types.Object.__methods['str'] = function (this) {
	return(this.repr());
    };

    var List = System.types.List;

    List.__methods['for_each'] = function (this, func) {
	var i = 0;
	var l = this.len();
	while (i < l) {
	    func(this[i]);
	    i += 1;
	}
    };

    List.__methods['each_for'] = function (this, func) {
	var i = this.len();
	while (i > 0) {
	    i -= 1;
	    func(this[i]);
	}
    };

    List.__methods['map'] = function (this, func) {
	var l = this.len();
	var i = 0;
	var ret = [];
	while (i < l) {
	    ret.append(func(this[i]));
	    i += 1;
	}
	return(ret);
    };

    // ignore entries where func returns `ignore` value
    List.__methods['map2'] = function (this, func, ignore) {
	var l = this.len();
	var i = 0;
	var ret = [];
	while (i < l) {
	    var x = func(this[i]);
	    if (x != ignore) {
		ret.append(x);
	    }
	    i += 1;
	}
	return(ret);
    };

    var repr = function (x) { return(x.repr()); };
    List.__methods['str'] = List.__methods['repr'] = function (this) {
	return("[" + ", ".join(this.map(repr)) + "]");
    };

    var str = function (x) { return(x.str()); };
    var __print = function (file, l) {
	l = l.map(str);
	file.write(" ".join(l) + "\n");
    };

    var py_sys = System.pyimport("sys");

    var pr = function (...args) {
	__print(py_sys.stdout, args);
    };
    System.print = pr;

    var er = function (...args) {
	__print(py_sys.stderr, args);
    };
    System.error = er;
}

if (System.parser.filename) {
    var fname = System.parser.filename; // set by system.py:load_parser
    var p = System.parser.Parser.new();
    System.parser.parser = p;	// make visible to extensions

    p.start_parse(fname);
    while (!p.end()) {
	// parse one statement into abstact syntax tree of Symbols
	var ast = p.statement();

	// generate VM code
	var vmcode = System.parser.VMCode.new();
	ast.gen(vmcode);
	var insts = vmcode.finish(ast); // List of instruction Lists

	// generate Closure (w/ initial scope)
	var f = System.assemble(insts, fname); // take module for scope???

	// run statement
	f();
    }
} // if (System.parser.filename)
