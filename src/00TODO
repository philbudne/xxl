FIX
===
Dict str/repr, for_each
	need iterator!!

split Number into Float and Int

Check Token objects have Class set!

hook in bootstrap.vmx build in Makefile

bootstrap.md -- adding operator

**** flush invoke_function/method?!
	or use existing VM!!

*** BUG: Only CPObjects can be used as Dict keys
	(Dicts currently indexed by Python values,
	 tho CPObject has proxy __hash__)

** clean up relops, write tests!!!!!!

** add .git/pre-commit check?

** -s (stats) broken??

* regression test depends on order dicts (Python 3.6)
	remove first line (and add back compile time?!)

run "__extensions__" (pass importer's initial scope? iscope.System??)
	(unless requested not to!)

bootstrap.vmx:
	load System object(??)
	"System.parser = System.import_vmx('parser.vmx');"
	native code for_each, each_for, map, map2, print????

type wrapping:
	*** have __classes instead of System.types?? __xxl.classes?
	clean up!!!
	create_sys_type passes Python value!!!!!!!!!!!
	Fix all access to System types (get from module top level scope??)

break import cycles??
	keep dict of filename => module??

tokenizer: take \u{XX...} instead of \uXXXX!!!
	take \n \r \t ..... >>>

fix/revive "reserved" attribute in parser?!!

true/null/false are writable!!!??? (bug or feature?)
use native print

xxl.py: w/o filename run read/eval/print loop
	need to change statement() and std() methods
		to "check" @ end (w/o advance) -- ie; check("}")
		and re-prime (at top of statement()?)

TEST
====
str & repr methods (& Str.join)
	Callables
	write print/error as native functions

CLEANUP
=======
"make update_parser"?  Have parser out of data message tell you to run it????
Object "getstr()" method for PyFuncs, or utility function????
handle System.types.Foo.new() -- need 'init' method for each Class?!
	Number.init -- take string (and radix?)
replace [this.]token.id() == X w/ this.check(X)???
rename System to xxl? __xxl??
flush __mkobject for:
	import -- return Module!
	tokenizer -- return List?
Do wrapping in CPyFunc/CPyObj?

add Dict keys() & for_each? a generator??
test if implementing VM as chain of if's (on ints)
	instead step on Instr objects is faster
Have pyfunc "invoke" method (un)wrap args/results??
	wrap as tail call
split up parser.xxl (into pratt,xlparser,vmcode??)
Make Scopes transparent??
	System.scope()??
	Scope.parent()??
Make callable objects (more) transparent??
	CClosure.get{code,scope}??
implement methods, class members, class methods via descriptors???
reenable MethodInstr (replace lit/push/./call), avoid BoundMethod
make native Tokenizer (gonna be slow!)
	need str[n], str.ord() str.isalpha() str.isdigit()?
	arbitrary spans of op chars
	allow unicode
		in identifiers (if leading A-Za-z_ ??)
		else "operator" (may not contain alphanumeric)
	/* */ comments?
	"""string""" (or use some unicode chars for quoting?)

FEATURES (or extensions)
========================
Add iterators?  object w/ next method
	implement for (var VAR in ITER) extension??

	(return via (break) continuation when exhausted):
    break:
	while (true) {
	    var item = iter.next(break);
	    ....
	}


Object: dir() method??
	props() method return Dict?
load compressed vmx (JSON) files and/or use some faster serialization library!!
make obj_get of unknown property an error
	(depended on by .std lookup)
	add "has_prop" method? .? operator?!!!
	Object.has_method method?
add "undefined" value (initial/default value for vars/args)??

exceptions (using Continuations)
	Have "try" create scope with "raise" variable.
	silently pass "raise" variable?

"in" operator for collections?

port VM to rpython?!

JS "spread" operator in function arguments ...array
	(may be used any number of times!)

missing methods (lots!!!)
    Str binop: full relops (require str lhs)
    List slice method

make function name () .... define name in local scope?????
	close2 patches -- need to make "function foo() {}" a valid expr stmt
	ALWAYS put name into CClosure for debug/trace???

make a full expression language??
	is "{" ambiguous?? forbid at "top level"??

add multi-line strings

add docstrings?
