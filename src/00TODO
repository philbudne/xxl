FIX
===
bootstrap.md -- adding operator similar to adding opcode

*** have invoke_function/method use current VM??
	have CallInstr save_frame (instead of CClosure.invoke)?
		(all CInstances will need to restore)
		need VM method to load codebase and pc?!
	allow tail calls only? Take Python "continuation"?
	System.assemble

*** BUG: Only VInstances can be used as Dict keys
	(Dicts currently indexed by Python values)

** clean up relops, write tests!!!!!!

** add .git/pre-commit check?

** -s (stats) broken??

run "__extensions__" (pass importer's initial scope? iscope.System??)
	(unless requested not to!)

always preload a (bootstrap.vmx) file??
	load System object
	including "System.parser = System.import_vmx('parser.vmx');"
	native code for_each, each_for, map, map2 (take arg for "ignore" value)

type wrapping:
	*** have __classes instead of System.types??
	clean up!!!
	create_sys_type passes Python value!!!!!!!!!!!
	Fix all access to System types (get from module top level scope??)

break import cycles??
	keep dict of filename => module??

tokenizer: take \u{XX...} instead of \uXXXX!!!
	take \n \r \t ..... >>>

fix/revive "reserved" attribute in parser?!!

true/null/false are writable!!!??? (bug or feature?)
use native print

xxl.py: w/o filename run read/eval/print loop
	need to change statement() and std() methods
		to "check" @ end (w/o advance)
		and re-prime (at top of statement()?)

TEST
====
str & repr methods (& Str.join)
	Callables
	write print/error as native functions

CLEANUP
=======
** rename Instance to CObject???
	(VInstance to VObject -- or PObject?? (and VClass to PClass)???)
Have PObject have a public value property (method?)???
Number.init -- take string?
replace [this.]token.id() == X w/ this.check(X)???
rename System to xxl? __xxl??
Get rid of PyObjClass and use '(' binop for calls?
flush JSObject?
	used for System/System.types -- use Object?
	import -- return Module!
	tokenizer -- return List?
Do wrapping in CPyFunc/CPyObj?

 add Dict keys() & for_each? a generator??
Object.is method? operator?? Object.ident() method??
test if implementing VM as chain of if's (on ints)
	instead step on Instr objects is faster
Have pyfunc "invoke" method (un)wrap args/results??
	wrap as tail call
split up parser.xxl (into pratt,xlparser,vmcode??)
Make CInstances (more) transparent??
	CClosure.get_code method??
Make Scopes transparent??
	System.scope()?? (need PyScopeFunc)
implement methods, class members, class methods via descriptors???
reenable MethodInstr (replace lit/push/./call), avoid BoundMethod
make native Tokenizer (gonna be slow!)
	need str[n], str.ord() str.isalpha() str.isdigit()?
	arbitrary spans of op chars
	allow unicode
		in identifiers (if leading A-Za-z_ ??)
		else "operator" (may not contain alphanumeric)
	/* */ comments?
	"""string""" (or use some unicode chars for quoting?)

FEATURES (or extensions)
========================
Add iterators?  object w/ next method
	(return via (break) continuation when exhausted):
    break:
	while (true) {
	    var item = iter.next(break);
	    ....
	}

Object: dir() method?? or make props visible as Dict in __props property?
load compressed vmx (JSON) files and/or use some faster serialization library!!
make obj_get of unknown property an error
	(depended on by .std lookup)
	add "have_prop" method? .? operator?!!!
	has_method??
add "undefined" value (initial/default value for vars/args)??
exceptions (using Continuations)
"in" operator for collections?
	has_item method?
port VM to rpython?!
JS "spread" operator in function arguments ...array
	(may be used any number of times!)
missing methods (lots!!!)
    Str binop: full relops (require str lhs)
    List slice method
make function name () .... define name in local scope?????
	close2 patches -- need to make "function foo() {}" a valid expr stmt
make a full expression language??
	is "{" ambiguous?? forbid at "top level"??
