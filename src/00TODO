FIX
===
BUG!! ".." doesn't work for multi-layer Classes!!
	A>B>C  B..foo calls itself!
	make this.super([Super]) return proxy object???
		what do Ruby and modern ES do????

doc.xxl: generate index of classes (& Vars section) at top
	hn Method NAME instead of "hn Method & hn+1 NAME"
		(avoid tiny print)

jslex.py:
	"error" method
	make Token w/ type == "ERROR"???
	need "msg" field???

Makefile:
	move checked-in {bootstrap,parser}.vmx to "dist"??
	have Makefile set XXL_LIB_PATH to ".:lib:dist"??
	"make install" install to "lib"???????
	"make dist" install to "dist"?
	complain if bootstrap.vmx, classes.md out of date (vs dist)
	"make html" -- generate html for classes & all lib & lib/ext files in html dir??

lib & ext/lib:
	generate .md files, index.md file??
	run all as tests??

*** BUG: Only CPObjects can be used as Dict keys
	(Dicts currently indexed by Python values,
	 tho CPObject has proxy __hash__)

	Class method/op dicts in classes.py all use str as key.
		(all via _mkdict)

*** BUG: can overwrite "const" values in a Module!!!
	need descriptors (slots) ??

* NOTE:
	regression test depends on:
		ordered dicts (Python 3.6)
	need PYTHONIOENCODING=utf8 w/ pypy3 7.3.1 to pass test #41

wrap:
	PyObject: test if Python object is Itera{ble,tor};
		if so, return PyItera{ble,tor}Object???

TEST
====
test PyObject.props()
str & repr methods (& Str.join)
	Callables
__extend_parser

CLEANUP
=======
"make update_parser"?  Have PARSER_VMX out of date message tell you to run it???
CPObject.getstr() method for PyFuncs, or utility function????
split Number into Float and Int
	Have Int initializer take optional radix
test if implementing VM as chain of if's (on ints)
	instead step on Instr objects is faster
split up parser.xxl (into pratt,xlparser,vmcode??)
Make Scopes transparent??  Subclass of Dict??
	__xxl.current_scope()??
	Scope.parent()??
Make callable objects (more) transparent??
	Closure.get{code,scope,args}()??
	BoundMethod.get{object,function}()??
	Closure.getframe() => Frame object w/ where, scope, code, pc, parent methods?
implement methods, class members, class methods via descriptors???
reenable MethodInstr (binop_lit_call?); avoid BoundMethod!!

FEATURES (or extensions)
========================
NOTE! many of these are just thoughts, possibly bad ones!

Set
Object: dir() method?? Return Set??
load compressed vmx (JSON) files and/or use some faster serialization library!!
make obj_get of unknown property an error
	(depended on by .std lookup)
	add "has_prop" method? ?. operator?!!!
	Object.has_method method?
add "undefined" value (initial/default value for vars/args)??

exceptions (using Continuations?)
	resumable/non-resumable
	Have "try" create scope with "raise" variable.
	silently pass "raise" variable?

"in" operator for iterables?
	"has" method???

port VM to rpython?!

make function name () .... define name in local scope?????
	close2 patches -- need to make "function foo() {}" a valid expr stmt
	ALWAYS put name into CClosure for debug/trace???

make a full expression language??
	optionally (via a subclass?)
	stmt value already available in vm AC

create wrapper Class for CObjects with real invoke method,
	with a "(" binop that calls invoke??

truthiness: check for is_true property, then to_bool method??
	(default to_bool method returns property value)

Helper to declare PyFunc wrappers for methods???
	take string of argument types to expect/translate

tokenizer that takes string (any iterable?) for input
	(could use for "eval")

** clean up relops, write tests!!!!!!
	move to Orderable mixin?

pyimport => PyObject.new??

Parser doc formatter;
    walk symbol_classes, display docstrings, precedence
    format table for symbol_classes?

Complain about unused/unread variables (when exiting scope?)

Can lexer operator/name dichotomy be eliminated????
	(to allow unicode to start either operator or name)
	would lose "Unknown operator" error.
	things that start w/ letter terminated by operator or space
	things that start w/ operator ASCII terminated by letter or space?
	things that contain non-ASCII need to be terminated by space or non-operator
	allow { and } as combining characters?
		(to allow {{ }} for frozen Dict?)
		would need "{ }" for empty Dict lit.

XXXop opcodes, PyFunc.invoke do not consume vm.args
	("clargs" needed for spread args; clear needed in "call")

doc.xxl
    HTML markup:
	output name anchors
	replace HTML entities!!!!!
	at low (append?) level:
		use re's to change `thing` in docstrings to <code></code>
    detect ```stuff``` and DON'T smush together???
	change ```stuff``` to HTML <pre>stuff</pre>

Makefile:
	bootstrap.vmx:
		ignore metadata line?
		all outputs depend on $(BOOTSTRAP_VMX)????
		recurse setting BOOTSTRAP_VMX to bootstrap.vmx.tmp to test??

import:
	options (dict as second arg?)
		bootstrap_vmx file
		parser_vmx file
		ignore __extend_parser
	Make Module.new() do importing?
	Module.create replaces System._import?
	Native Module.init() would call Module.create
	    could call __modinfo.load_vmx(bootstrap)
		*BUT* would need to do it "manually" for "main"

** add .git/pre-commit check?

bootstrap.md -- describe adding operator;
	add to VM or bootstrap first.
	recompile bootstrap (if needed)
	write test; add to test directory
	use in parser.xxl

straighten out .py file dependency graph?
	split up classes.py into classes/Classname.py??
	    missing methods (lots!!!)
		define PyFuncs via format strings like PyArg_ParseTuple?
			OR machine generated Python (no run-time interp.)
		List slice method
	    add Bytes Class (subclass of CharSeq? ByteLike?)

Have {LBrace,Label}.gen_code return List of code
		  (.gen_closure generate "close" instr??)
	call bclose_call in {If,While}.gen
		(allow making/passing closures)

print module??
	__xxl.print => print.out
	__xxl.error => print.err

Implement Object.freeze_object, Object.seal_object (methods) ???

Add List, Dict [gs]etitem methods??

Keep cache of PyObjects, so not making new ones?

for symmetry define a '(' binop for Callable: r.invoke(r, *l.value) ??

Implement JS ...spread in List and Dict lits?
	just means calling extend or update??

BUG: "var else;" doesn't stop "if .... else" ?!

Accept "props" key in Class.new Dict to initialize
	class properties??

Always create a FooClass metaclass when creating Class Foo?
	populate with "class_methods" for methods????

type wrapping:
	classes.py pyfuncs do not invoke Class init methods!
		revisit wrapping return values in CPyFunc.invoke
			(tail calls to "new")

REPL: handle parse errors!!!

Try using SingletonClass.new for End class!
