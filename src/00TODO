FIX
====
*** have invoke_function/method use current VM??
	have CallInstr save_frame (instead of CClosure.invoke)?
		(all CInstances will need to restore)
		need VM method to load codebase and pc?!

*** runtime errors have doubled filename

*** BUG: Only VInstances can be used as Dict keys

** add .git/pre-commit check?

** -s (stats) broken??

** rename Instance to CObject???

** wrap VInstances in VObject with VClass metaclass??
  (rename VInstance to CVObject??)
   have VInstance.__hash__ call .value.__hash__()??

** add Dict keys() & for_each? a generator??
* Object.is method? operator?? Object.ident() method??
** Dict only handling VInstances for key
   ** need to pool VInstances (by hash?) in order to allow them as keys?
	prog

make function name () .... define name in local scope?????
	close2 patches -- need to make "function foo() {}" a valid expr stmt
make a full expression language??
	is "{" ambiguous?? forbid at "top level"??
invoke_function/method (using new VM) won't work nicely with Continuations?
	add return_function/return_method that does: return(callable())
run "__extensions__" (pass importer's initial scope? iscope.System??)
	(unless requested not to!)
Get rid of PyObjClass and use '(' binop for calls?
always preload a (bootstrap.vmx) file??
	load System object
	including "System.parser = System.import_vmx('parser.vmx');"
	native code for_each, each_for, map, map2 (take arg for "ignore" value)
	Object.instance_of(...) .class()?

Fix all access to System types (get from module top level scope??)
break import cycles??
tokenizer: take \u{XX...} instead of \uXXXX!!!
revive "reserved" attribute in parser?!!
true/null/false are writable!!!??? (bug or feature?)
fix print -- write natively?
	Str.join would be helpful!

TEST
====
str & repr methods (& Str.join)
	Callables
	write print/error as native functions

CLEANUP
=======
flush JSObject?
	used for System/System.types -- use Object?
	import -- return Module!
	tokenizer -- return List?
Do wrapping in CPyFunc/CPyObj?
test if implementing VM as chain of if's (on ints)
	instead step on Instr objects is faster
Have pyfunc "invoke" method (un)wrap args/results??
	wrap as tail call
split up parser.xxl (into pratt,xlparser,vmcode??)
Make CInstances (more) transparent??
	CClosure.get_code method??
Make Scopes transparent??
	System.scope()?? (need PyScopeFunc)
implement methods, class members, class methods via descriptors???
reenable MethodInstr (replace lit/push/./call), avoid BoundMethod
make native Tokenizer (gonna be slow!)
	need str[n], str.ord() str.isalpha() str.isdigit()?
	arbitrary spans of op chars
	allow unicode
		in identifiers (if leading A-Za-z_ ??)
		else "operator" (may not contain alphanumeric)
	/* */ comments?
	"""string""" (or use some unicode chars for quoting?)

FEATURES (or extensions)
========================
Object: dir() method?? or make props visible as Dict in __props property?
load compressed vmx (JSON) files and/or use some faster serialization library!!
make obj_get of unknown property an error
	(depended on by .std lookup)
	add "hasattr" method?
exceptions (using Continuations)
"in" operator for collections?
port VM to rpython?!

missing methods (lots!!!)
    Str binop: full relops (require str lhs)
    List slice method
