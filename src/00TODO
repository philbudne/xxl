FIX
===
BUG:	reference to "continue" label fails if first token in block
	(see comment in Parser.block method)

Can lexer operator/name dichotomy be eliminated????
	would lose "Unknown operator" error.
	(to allow unicode to start either operator or name)
	things that start w/ letter terminated by operator or space
	things that start w/ operator ASCII terminated by letter or space?
	things that contain non-ASCII need to be terminated by space or non-operator

doc.xxl: Show Class supers

Makefile:
	ignore metadata line in bootstrap.vmx

Make PLOR < PLAND??

parser:
    "end" flag on Symbols? add "accept" method??

import:
	Make Module.new() do importing?
	Module.create replaces System._import?
	Native Module.init() would call Module.create
	    could call __modinfo.load_vmx(bootstrap)
		*BUT* would need to do it "manually" for "main"
	    optional args (dict?)
		optional parser_vmx file (set __modinfo.parser)
		    default parser in __xxl.parser?
		optional bootstrap_vmx file
		option to ignore __extend_parser
	_COULD_ define native code __modinfo.load_vmx (using .assemble)
	    BUT still need to load bootstrap!!!

init methods for String, Bool, Null
	BoolClass, NullClass?
	StringClass & NumberClass metaclasses (to return self)?

replace parser.vmx at end of tests?
	save .bak file??

build/replace bootstrap.vmx in normal Makefile
	all outputs depend on $(BOOTSTRAP_VMX)?
	recurse setting BOOTSTRAP_VMX to bootstrap.vmx.tmp to test before replacing
	don't replace (mv) if no change

bootstrap.md -- describe adding operator;
	add to VM or bootstrap first.
	recompile bootstrap (if needed)
	write test; add to test directory
	use in parser.xxl

*** BUG: Only CPObjects can be used as Dict keys
	(Dicts currently indexed by Python values,
	 tho CPObject has proxy __hash__)

** add .git/pre-commit check?

* regression test depends on ordered dicts (Python 3.6)
	remove first line (and add back compile time?!)

type wrapping:
	classes.py pyfuncs do not invoke Class init methods!
	revisit wrapping return values in CPyFunc.invoke???

true/null/false are writable!!!??? (bug or feature?)
	add "const" statement (subclass "Var")??
		add '.const' flag to Scope table entry?
			Subclass Name??
			copy in _gtok (after c.new??)
			check like .lvalue?
		use .setclass on Name objects to Const??  Lit????
	have while/if detect const values

xxl.py: w/o filename run read/eval/print loop
	need to change statement() and std() methods
		to "check" @ end (w/o advance) -- ie; check("}")
		and re-prime (at top of statement()?)

TEST
====
str & repr methods (& Str.join)
	Callables
__extend_parser
Iterable.sorted()

CLEANUP
=======
"make update_parser"?  Have PARSER_VMX out of date message tell you to run it???
Object "getstr()" method for PyFuncs, or utility function????
rename System to xxl? __xxl??
split Number into Float and Int
	Have Int initializer take optional radix
test if implementing VM as chain of if's (on ints)
	instead step on Instr objects is faster
split up parser.xxl (into pratt,xlparser,vmcode??)
Make Scopes transparent??
	System.scope()??
	Scope.parent()??
Make callable objects (more) transparent??
	Closure.get{code,scope,args}??
	BoundMethod.get{object,function}??
implement methods, class members, class methods via descriptors???
reenable MethodInstr (binop_lit_call?); avoid BoundMethod!!

FEATURES (or extensions)
========================
Set
Object: dir() method?? Return Set??
load compressed vmx (JSON) files and/or use some faster serialization library!!
make obj_get of unknown property an error
	(depended on by .std lookup)
	add "has_prop" method? ?. operator?!!!
	Object.has_method method?
add "undefined" value (initial/default value for vars/args)??

exceptions (using Continuations?)
	resumable/non-resumable
	Have "try" create scope with "raise" variable.
	silently pass "raise" variable?

"in" operator for iterables?

port VM to rpython?!

missing methods (lots!!!)
    Str binop: full relops (require str lhs)
    List slice method

make function name () .... define name in local scope?????
	close2 patches -- need to make "function foo() {}" a valid expr stmt
	ALWAYS put name into CClosure for debug/trace???

make a full expression language??
	is "{" ambiguous?? forbid at "top level"??

XXXop opcodes do not consume vm.args
	("clargs" needed for spread args; clear needed in "call")

create wrapper Class for CObjects with real invoke method,
	with a "(" binop that calls invoke??

bring back is_true?????

Helper to declare PyFunc wrappers for methods???
	take string of argument types to expect/translate

tokenizer that takes string (any iterable?) for input
	(could use for "eval")

** clean up relops, write tests!!!!!!
	move to Orderable mixin?

pyimport => PyObject.new??

Undefined Class / undef value
    ?? (nullish or-if) operator
    ?. (optional chaining)

Parser doc formatter;
    walk symbol_classes, display docstrings, precedence
    format table for symbol_classes?

Complain about unused/unread variables (when exiting scope?)
