FIX
===
Makefile:
	check generated files (.vmx .md) into "dist" directory (for easy pull)
		copy .vmx from dist directory (to lib directory????)
	generate classes.md, but don't replace? just complain if out of date??
	ditto for bootstrap.vmx!!!

lib dir
	generate .md files
	run as tests, generate index.md file?
	XXL_LIB_PATH
	do-while.xxl
	nullish.xxl?

rename "classes" Module to "__classes"??

*** BUG: Only CPObjects can be used as Dict keys
	(Dicts currently indexed by Python values,
	 tho CPObject has proxy __hash__)

	Class method/op dicts in classes.py all use str as key.
		(all via _mkdict)

*** BUG: can overwrite "const" values in a Module!!!
	need descriptors (slots) ??

* NOTE:
	regression test depends on:
		ordered dicts (Python 3.6)
	need PYTHONIOENCODING=utf8 w/ pypy3 7.3.1 to pass test #41

wrap:
	PyObject: test if Python object is Itera{ble,tor};
		if so, return PyItera{ble,tor}Object???

type wrapping:
	classes.py pyfuncs do not invoke Class init methods!
		revisit wrapping return values in CPyFunc.invoke
			(tail calls to "new")

xxl.py: w/o filename run read/eval/print loop
	need to change statement() and std() methods
		to "check" @ end (w/o advance) -- ie; check("}")
		and re-prime (at top of statement()?)

TEST
====
test PyObject.props()
str & repr methods (& Str.join)
	Callables
__extend_parser

CLEANUP
=======
"make update_parser"?  Have PARSER_VMX out of date message tell you to run it???
CPObject.getstr() method for PyFuncs, or utility function????
split Number into Float and Int
	Have Int initializer take optional radix
test if implementing VM as chain of if's (on ints)
	instead step on Instr objects is faster
split up parser.xxl (into pratt,xlparser,vmcode??)
Make Scopes transparent??
	System.scope()??
	Scope.parent()??
Make callable objects (more) transparent??
	Closure.get{code,scope,args}??
	BoundMethod.get{object,function}??
implement methods, class members, class methods via descriptors???
reenable MethodInstr (binop_lit_call?); avoid BoundMethod!!

FEATURES (or extensions)
========================
Set
Object: dir() method?? Return Set??
load compressed vmx (JSON) files and/or use some faster serialization library!!
make obj_get of unknown property an error
	(depended on by .std lookup)
	add "has_prop" method? ?. operator?!!!
	Object.has_method method?
add "undefined" value (initial/default value for vars/args)??

exceptions (using Continuations?)
	resumable/non-resumable
	Have "try" create scope with "raise" variable.
	silently pass "raise" variable?

"in" operator for iterables?
	"has" method???

port VM to rpython?!

missing methods (lots!!!)
    Str binop: full relops (require str lhs)
    List slice method

make function name () .... define name in local scope?????
	close2 patches -- need to make "function foo() {}" a valid expr stmt
	ALWAYS put name into CClosure for debug/trace???

make a full expression language??
	is "{" ambiguous?? forbid at "top level"??

XXXop opcodes do not consume vm.args
	("clargs" needed for spread args; clear needed in "call")

create wrapper Class for CObjects with real invoke method,
	with a "(" binop that calls invoke??

bring back to_bool?

Helper to declare PyFunc wrappers for methods???
	take string of argument types to expect/translate

tokenizer that takes string (any iterable?) for input
	(could use for "eval")

** clean up relops, write tests!!!!!!
	move to Orderable mixin?

pyimport => PyObject.new??

Undefined Class / undef value
    ?? (nullish or-if) operator
    ?. (optional chaining)

Parser doc formatter;
    walk symbol_classes, display docstrings, precedence
    format table for symbol_classes?

Complain about unused/unread variables (when exiting scope?)

Can lexer operator/name dichotomy be eliminated????
	would lose "Unknown operator" error.
	(to allow unicode to start either operator or name)
	things that start w/ letter terminated by operator or space
	things that start w/ operator ASCII terminated by letter or space?
	things that contain non-ASCII need to be terminated by space or non-operator

doc.xxl
    HTML markup:
	output name anchors
	replace HTML entities!!!!!
	at low (append?) level:
		use re's to change `thing` in docstrings to <code></code>
    detect ```stuff``` and DON'T smush together???
	change ```stuff``` to HTML <pre>stuff</pre>

Makefile:
	bootstrap.vmx:
		ignore metadata line?
		all outputs depend on $(BOOTSTRAP_VMX)????
		recurse setting BOOTSTRAP_VMX to bootstrap.vmx.tmp to test??

import:
	optional bootstrap_vmx file
	option to ignore __extend_parser

	Make Module.new() do importing?
	Module.create replaces System._import?
	Native Module.init() would call Module.create
	    could call __modinfo.load_vmx(bootstrap)
		*BUT* would need to do it "manually" for "main"
	    optional args (dict?)
		optional parser_vmx file (set __modinfo.parser)
		    default parser in __xxl.parser?
	_COULD_ define native code __modinfo.load_vmx (using .assemble)
	    BUT still need to load bootstrap!!!

parser:
    "end" flag on Symbols (rather than hard-wired in p.end())
    add "accept" method??

** add .git/pre-commit check?

bootstrap.md -- describe adding operator;
	add to VM or bootstrap first.
	recompile bootstrap (if needed)
	write test; add to test directory
	use in parser.xxl

straighten out .py file dependency graph?
	split up classes.py into classes/Classname.py??

Have LBrace.gen[_closure] return List of code
	call bclose_call in {If,While}.gen

print module??
	__xxl.print => print.out
	__xxl.error => print.err
