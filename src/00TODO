*** BUG: Only CPObjects can be used as Dict keys
	fix in github branch cobj-dict-key
	parser.vmx on parser.xxl slowdown 5.27s => 5.798
	TODO:
	-- Module.modules dict

*** BUG: can overwrite "const" values in a Module!!!
	need descriptors (slots) ??

TEST
====
test PyObject.props()
__extend_parser

CLEANUP
=======
split Number into Float and Int??
	Have Int initializer take optional radix
test if implementing VM as chain of if's (on ints)
	instead step on Instr objects is faster
split up parser.xxl (into pratt,xlparser,vmcode??)
Make Scopes transparent??  Subclass of Dict??
	__xxl.current_scope()??
	Scope.parent()??
Make callable objects (more) transparent??
	Closure.get{code,scope,args}()??
	BoundMethod.get{object,function}()??
	Closure.getframe() => Frame object w/ where, scope, code, pc, parent methods?
implement methods, class members, class methods via descriptors???
reenable MethodInstr (binop_lit_call?); avoid BoundMethod!!

FEATURES (or extensions)
========================
NOTE! many of these are just thoughts, possibly bad ones!

load compressed vmx (JSON) files and/or use some faster serialization library!!
make obj_get of unknown property an error
	(depended on by .std lookup)
	add "has_prop" method? ?. operator?!!!
	Object.has_method method?
add "undefined" value (initial/default value for vars/args)??

exceptions (using Continuations?)
	resumable/non-resumable
	Have "try" create scope with "raise" variable.
	silently pass "raise" variable?

"in" operator for iterables?
	"has" method???

port VM to rpython?!

make function name () .... define name in local scope?????
	close2 patches -- need to make "function foo() {}" a valid expr stmt
	ALWAYS put name into CClosure for debug/trace???

make a full expression language??
	optionally (via a subclass?)
	stmt value already available in vm AC

create wrapper Class for CObjects with real invoke method,
	with a "(" binop that calls invoke??

truthiness: check for is_true property, then to_bool method??
	(default to_bool method returns property value)

tokenizer that takes string (any iterable?) for input
	(could use for "eval")

** clean up relops, write tests!!!!!!
	move to Orderable mixin?

pyimport => PyObject.new??

parser.vmx --dump
    format HTML table?
    walk symbol_classes, display docstrings, precedence
    format table for symbol_classes?

Complain about unused/unread variables in compiler
	(when exiting scope?)

Can lexer operator/name dichotomy be eliminated????
	(to allow unicode to start either operator or name)
	would lose "Unknown operator" error.
	things that start w/ letter terminated by operator or space
	things that start w/ operator ASCII terminated by letter or space?
	things that contain non-ASCII need to be terminated by space or non-operator
	allow { and } as combining characters?
		(to allow {{ }} for frozen Dict?)
		would need "{ }" for empty Dict lit.
		OR only combine like characters!!!

XXXop opcodes, PyFunc.invoke do not consume vm.args
	("clargs" needed for spread args; clear needed in "call")

doc.xxl
    HTML: use re's to change `thing` in docstrings to <code></code>
    detect ```stuff``` and DON'T smush together???
	treat blank line as HTML <p>
	change ```stuff``` to HTML <pre>stuff</pre>

Makefile:
	bootstrap.vmx:
		ignore metadata line?
		all outputs depend on $(BOOTSTRAP_VMX)????
		recurse setting BOOTSTRAP_VMX to bootstrap.vmx.tmp to test??

import:
	options (dict as second arg?)
		bootstrap_vmx file
		parser_vmx file
		ignore __extend_parser
	Make Module.new() do importing?
	Module.create replaces System._import?
	Native Module.init() would call Module.create
	    could call __modinfo.load_vmx(bootstrap)
		*BUT* would need to do it "manually" for "main"

** add .git/pre-commit check?

bootstrap.md -- describe adding operator;
	add to VM or bootstrap first.
	recompile bootstrap (if needed)
	write test; add to test directory
	use in parser.xxl

straighten out .py file dependency graph?
	split up classes.py into classes/Classname.py??
	    missing methods (lots!!!)
		define PyFuncs via format strings like PyArg_ParseTuple?
			OR machine generated Python (no run-time interp.)
		List slice method
	    add Bytes Class (subclass of CharSeq? ByteLike?)

Have {LBrace,Label}.gen_code return List of code
		  (.gen_closure generate "close" instr??)
	call bclose_call in {If,While}.gen
		(allow making/passing closures)

print module??
	__xxl.print => print.out
	__xxl.error => print.err

Implement Object.freeze_object, Object.seal_object (methods) ???

Add List, Dict [gs]etitem methods??

Keep cache of PyObjects, so not making new ones?

for symmetry define a '(' binop for Callable: r.invoke(r, *l.value) ??

Implement JS ...spread in List and Dict lits?
	just means calling extend or update??

Accept "props" key in Class.new Dict to initialize
	class properties??

type wrapping:
	new_by_name does not invoke Class init methods!
		revisit wrapping return values in CPyFunc.invoke
			(tail calls to "new")

Always create a FooClass metaclass when creating Class Foo?
	populate with "class_methods" for methods????

	Class.new({name: "Foo", ... }) would need to create
		Class._new({name: "FooClass", supers: [this_class]})
		and return instance of FooClass!!!

create metaclasses for Bool, Null, Number, Str, Undefined with
	private 'new' methods?
	(have defclass always create metaclass name + 'Class'???)

Dict update: use __update if arg is a Dict?

Have List.__extend: have List.extend call for List argument?

Implement List '+' op using "extend"??

Add Symbol.json method for dumping ASTs, rather than obj2python_json crockery?
	could include non-standard object field names
	(outside ordinals "first", "second", "third")
	default method just loops:
      leave_loop:
	['first, 'second', 'third'].for_each(
	    function (ordinal) {
		if (this.hasprop(ordinal)) {
		    list.append(this.getprop(ordinal));
		}
		else {
		    leave_loop();
		}
	    }
	);

doc.xxl:
	generate (hidable?) index of classes (& Vars section) at top
	by default hide all greyed out methods/members?!

Makefile:
	"make install" install to "dev"???????
	"make html" -- generate html for classes & all lib & lib/ext files
		in html dir??
	lib & ext/lib:
		generate .md files, index.md file??
		run all as tests??

Replace TEMP register w/ __tN variables in scope?
	execute code in a block closure??
