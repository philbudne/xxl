// -*-js-*-
// http://matt.might.net/articles/programming-with-continuations--exceptions-backtracking-search-threads-generators-coroutines/
// http://matt.might.net/articles/programming-with-continuations--exceptions-backtracking-search-threads-generators-coroutines/coop-threads.scm

var thread_queue = [];		// list of continuation
var halt = false;		// continuation

// like a setjmp: on initial invocation returns a Continuation
// when the Continuation is invoked, the value is the argument passed
//	to the Continuation (always null in this case).
var current_continuation = function () { return(return); };

var TRACE = __xxl.argv.len() > 0;
var trace = function (a, b, c) { // XXX use ...args
    if (TRACE) {
	if (c) {
	    __xxl.print(a, b, c);
	}
	else if (b) {
	    __xxl.print(a, b);
	}
	else {
	    __xxl.print(a);
	}
    }
};

var quit = function () {
    if (thread_queue.len() > 0) {
	trace("quit; queue len =", thread_queue.len());
	var next_thread = thread_queue.pop(0);
	trace("quit calling", next_thread, "w/ null");
	next_thread(null);	// resume
    }
    trace("quit, queue empty");
    halt();
};

var spawn = function (thunk) {
    var cc = current_continuation();
    // cc is null (resume) or Continuation
    trace("spawn", cc);
    if (cc) {			// null or Continuation
	thread_queue.append(cc);
    }
    else {
	thunk();
	__xxl.print("thunk returned, calling quit");
	quit();
    }
};

var yield = function () {
    var cc = current_continuation();
    // cc is null or Continuation
    trace("yield cc", cc, thread_queue.len());
    if (cc && thread_queue.len() > 0) {
	var next_thread = thread_queue.pop(0);
	thread_queue.append(cc);
	trace("yield calling", next_thread, "w/ null");
	next_thread(null);	// resume
    }
};

var run_threads = function () {
    var cc = current_continuation();
    // Continuation first time
    // false when "halt" called.
    trace("run_threads", cc);
    if (cc) {			// first time
	halt = function () {
	    trace("halt called");
	    cc(false);
	};
	if (thread_queue.len() > 0) {
	    var next_thread = thread_queue.pop(0);
	    trace("calling", next_thread, "w/ null");
	    next_thread(null);	// resume
	}
    }
    else {
	trace("halted");
    }
};

//// Example cooperatively threaded program

var counter = 10;

// return a closure for a worker thread
var make_worker = function (name) {
    var loop = function () {
	while (true) {
	    if (counter < 0) {
		trace("thread", name, "calling quit");
		quit();
	    }
	    __xxl.print("thread", name, "counter", counter);
	    counter -= 1;
	    trace("thread", name, "calling yield");
	    yield();
	    trace("thread", name, "back from yield");
	}
    };
    return(loop);
};

spawn(make_worker("a"));
spawn(make_worker("b"));
spawn(make_worker("c"));
run_threads();
