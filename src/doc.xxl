// -*-js-*-

const __doc = "Program to extract and markup documentation from an XXL Module";

const classes = System.import("classes");

const re = System.pyimport("re");

const ADDR_RE = re.compile(" at 0x[0-9a-z]*");

// XXX need general iterator for class and all supers

var collect_class_ops = function (class, prop) {
    """
    traverse Class hierarchy for `class`
    collecting all methods/operators from property `prop`
	(one of '__methods', '__unops', '__binops', '__lhsops')
	returns Dict of Callables
    """
    var funcs = {};
    var props = {};
    var q = [class];
    var visited = {};
    var visit = function (c) {
	// XXX guard against revisit w/ Sets!!
	if (c !== classes.Object) { // XXX UGH! Stop The Looping!!!
	    q.extend(c.__supers || []);
	}

	// member (static) functions come first in MRO
	// (see classes.py find_in_supers)
	if (prop == '__methods') {
	    c.props().for_each(
		function (mprop) { // member property name
		    if (!mprop.starts_with("_")) { // ignore private members
			var value = c.getprop(mprop);
			if (value.instance_of(classes.Callable)) {
			    if (!funcs[mprop]) {
				funcs[mprop] = value;
			    }
			}
			else if (!props[mprop]) {
			    props[mprop] = value;
			}
		    }

		}
	    );
	} // __methods
	c.getprop(prop).items().for_each(
	    function (item) {	// item is [key, value]
		var name = item[0];
		var func = item[1];
		if (!name.starts_with("_")     // ignore private methods
		    && func && !funcs[name]) { // don't overwrite!
		    funcs[name] = func;
		}
	    }
	); // getprop(prop).items().for_each
    }; // visit
    while (q.len() > 0) {
	visit(q.pop(0));
    }
    return([funcs, props]);
};

var mudoc = function(mu, obj) {
    """
    format obj.__doc
    """
    var doc = obj.__doc;
    if (!doc) {
	return();
    }
    mu.p();
    // split into lines,
    // strip leading/trailing whitespace from lines,
    // ignoring empty lines, rejoin
    // XXX don't smoosh ```stuff```!!
    var strip = function (x) { return(mu.quote(x.strip())); };
    mu.blockquote(" ".join(doc.split("\n").map2(strip, "")));
};

var mufunc = function (mu, level, name, func) {
    """
    Markup a function/method.
    `level` is header level, `name` is opr/function name, `func` is Callable.
    """
    var args = func.__args() || "(?)";
    mu.hn(level, mu.code(mu.quote(name), args));
    var defn = func.__defn() || "?";
    mu.nappend(mu.i(func.getclass().name, "at", defn));
    mudoc(mu, func);
};

var muvalue = function (mu, level, name, value) {
    mu.hn(level, mu.code(name));
    mu.p();
    value = ADDR_RE.sub("", value.to_str()); // remove " at 0xXXXX"
    mu.blockquote("Value:", mu.code(mu.quote(value)));
};

var muclass = function (mu, class) {
    """
    `mu` is a MarkUp instance,
    `class` is a Class (metaclass) to document
    """

    mudoc(mu, class);

    [
     ['__methods', 'Methods'],
     ['__unops', 'Unary operators'],
     ['__binops', 'Binary operators'],
     ['__lhsops', 'LHS Binary operators']
    ].for_each(			// for_each property
	 function (pitem) {	// pitem => ["property", "english"]
	     var stuff = collect_class_ops(class, pitem[0]);
	     var m = stuff[0];	// dictionary of methods
	     if (m.len() > 0) {
		 mu.h3(pitem[1]);	// english name
		 mu.p();

		 m.items().sorted().for_each(
		     function (ditem) { // ditem => [method/op_name, function]
			 var name = ditem[0]; // method name or operator string
			 var func = ditem[1]; // Callable
			 mufunc(mu, 4, name, func);
		     }
		 );
	     } // have methods
	     m = stuff[1];	// dict of members
	     if (m.len() > 0) {
		 mu.h3("Members");
		 mu.p();
		 m.items().sorted().for_each(
		     function (ditem) { // ditem => [member_name, value]
			 var name = ditem[0]; // method name or operator string
			 var value = ditem[1];
			 muvalue(mu, 4, name, value);
		     } // function (ditem)
		 ); // for_each member
	     }
	 } // function (pitem)
    ); // for_each property
};

var mumodule = function (mu, module_name) {
    """
    Import and up a module.
    `module_name` is name to import.
    """
    var mod = System.import(module_name);

    mu.h1("Module", mu.code(module_name));
    mu.p();
    mudoc(mu, mod);

    // iterate over sorted names in Module
    var vars = [];
    mod..props().sorted().for_each(
	function (name) {
	    if (name.starts_with("_")) {
		return();
	    }
	    var x = mod.getprop(name);
	    if (x.instance_of(classes.Class)) {
		var supers = ",".join(x.__supers.map(function (c) { return(c.name); }));
		mu.h2("Class", mu.code(name), "subclass of", mu.code(supers));
		mu.p();
		muclass(mu, x);
	    }
	    else {
		vars.append(name);
	    }
	}
    );
    mu.h2("Variables");
    mu.p();
    vars.for_each(
	function (name) {
	    var x = mod.getprop(name);
	    if (x.instance_of(classes.Callable)) {
		mufunc(mu, 3, name, x);
	    }
	    else {
		muvalue(mu, 3, name, x);
	    }
	    mu.p();
	}
    );
};

if (__modinfo.main) {
    var markup = System.import("markup.xxl");
    var markup_class = markup.MarkDown;
    var i = 0;
    if (System.argv.len() > i && System.argv[i] == "--html") {
	markup_class = markup.HTML;
	i += 1;
    }
    var module_name = System.argv.len() > i ? System.argv[i] : "classes";

    var mu = markup_class.new();

    mumodule(mu, module_name);

    mu.hr();
    var time = System.pyimport("time");
    mu.nappend("formatted by doc.xxl on",
	       time.strftime("%Y-%m-%d")); // XXX want UTC

    // The very very very end.
    System.print(mu.render());	// output results
}
