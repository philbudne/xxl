// not -*-js-*- ("it's only a model") but edit like it is.
// Parser for eXperimental/eXtensible Language Zero (XXL/0)
// Blame: Phil Budne <phil _at_ regressive.org>

////////////////
// Adapted from:
//  parse.js
//  Parser for Simplified JavaScript written in Simplified JavaScript
//  From Top Down Operator Precedence
//  http://crockford.com/javascript/tdop/tdop.html
//  https://github.com/douglascrockford/TDOP
//  Douglas Crockford
//  2021-05-04
//  Public Domain
//
//  "This program makes frequent use of 'this' because I wrote it when I was young and foolish."
////////////////

// Changes Copyright Â© 2021,2023 Philip L. Budne

// PLB: NOTE!

// I've compounded the 'thissyness' by making the parser into a
// class, not SO much because one might want to have multiple
// active parsers in the same namespace, but to (try) to make it
// easier to override parser pieces (thru subclassing) without
// wholesale copying.  Further work is needed to make that a
// reality (isolating the creation of each Symbol class into
// a separate method??).

// In XXL "this" is always passed as explicit first argument (like
// Python) to make it clear where the value is coming from.  At least
// *I* think it's a feature.

// The individual Symbol classes could probably be declared at top
// level *IF* the nud/led/std parsing methods were passed the Parser
// instance as an argument.  This might be a great improvement in
// clarity, but would mean more arg passing, *AND* it would carve the
// Symbol subclass inheritance graph in stone...  Perhaps time (and
// attempts to use this toolkit to create new languages) will point the
// way....

// Converted to a narrow(minded) Class/instance data model; the
// hobgoblins of my small mind can't cope with the duality of
// "instances" being used as prototypes -- while it might detour the
// class/metaclass mobius/gordian straightjacket, it also obscures the
// origin of objects, and their structure/nature, and easily leads to
// chimerical objects of unclear origin, with parts glued on all over.

// I've refrained from placing any licensing terms on this file,
// in keeping with the spirit of the original author placement of
// the code into the public domain.

// It's more than slightly likely that you would be better served by
// using the original (TDOP) parser as the starting point for some new
// project!!

// XXX split up?? All imported modules would need to be pre-compiled (vmx files)

const __doc = "Extensible Parser/Compiler for XXL.";

const VMCode = __xxl.import("vmcode.vmx").VMCode;

const pratt = __xxl.import("pratt.vmx");


// keep in parser.xxl?
////////////////////////////////////////////////////////////////
// subclass PrattParser for XXL/0
// (smallest possible eXperimental/eXtensible Language)
// "jokes":
// * PL/1 was IBM's "One Language to Rule Them All" for System/360
//	(the one computer architecture anyone would ever need).
//	PL/1 was meant to replace both FORTRAN for scientific code
//	 and COBOL for business applications; it was a large
//	 language which had no reserved words, and all numeric
//	 variables were declared with their precision.
// * XXL is the U.S. clothing size two sizes larger than "large"
//	which I thought was a funny name for an intentionally tiny language.
//	(the original name for the project was ASAP (As Simple As Possible).
//	Apologies in advance for any perceived sizist slights.

var Parser = Class.new({
    name: "Parser",
    supers: [pratt.PrattParser],
    methods: {
	init: function (this_parser) {
	    // XXX split into two parts,
	    // first which creates p.Classname variables
	    // second which uses them,
	    // so that the Classes can be overridden??

	    var p = this_parser; // for brevity
	    p.as_class(Parser)..init();	// call superclass init

	    // precedence levels (keep as Parser.PXXX properties??)
	    // ***USE EVEN VALUES ONLY: prec-1 used for right associativity!!!
	    p.PASS = 10;		// assignment

	    p.PTERN = p.PASS + 10;	// ternary

	    p.PLOR = p.PTERN + 10;	// logical or (||)
	    p.PLAND = p.PLOR + 10;	// logical and (&&)

	    p.PCOMP = p.PLAND + 10;	// comparison

	    p.PBOR = p.PCOMP + 10;	// bitwise or (|)

	    p.PBAND = p.PBOR + 10;	// bitwise and (&)

	    p.PADD = p.PBAND + 10;
	    p.PSUB = p.PADD;

	    p.PMUL = p.PSUB + 10;
	    p.PDIV = p.PMUL;

	    p.PPFX = p.PDIV + 10;	// prefix (unary)

	    p.PDOT = p.PPFX + 10;	// exp.member
	    p.PIDX = p.PDOT;		// exp[index]
	    p.PFUN = p.PDOT;		// exp(args)

	    p.Balanced = Class.new({
		doc: "Class for terminal symbols that are the right side of matched pairs.",
		supers: [p.Symbol],
		name: "Balanced",
		methods: {
		    nud: function (this) {
			this.error("Unbalanced");
		    }
		}
	    });

	    p.add_terminal("Colon",  ":");
	    p.add_terminal("Comma",  ",");
	    p.add_terminal("Semi",   ";");
	    p.add_terminal("RParen", ")", p.Balanced);
	    p.add_terminal("RBrack", "]", p.Balanced);
	    p.add_terminal("RBrace", "}", p.Balanced).end_block = true;
	    p.add_terminal("Else",   "else");

	    p.Assign = Class.new({
		supers: [p.InfixR],
		name: "Assign",
		methods: {
		    led: function (this, left) {
			if (!left.lvalue) {
			    left.error("Not allowed on LHS of assignment");
			}
			this.first = left;
			this.second = p.expression(this.lbp-1);
			this.arity = "binary";
			return(this);
		    },
		    gen: function (this, vmcode) {
			this.second.gen(vmcode); // rhs
			this.first.gen_lhs(vmcode); // store
		    }
		}, // methods
		props: {
		    lbp: p.PASS,
		    exp_stmt: true
		}
	    });
	    p.add_symbol_class("=", p.Assign);

	    // base class for OP=
	    p.AssignOp = Class.new({
		name: "AssignOp",
		supers: [p.Assign],
		methods: {
		    // subclass must define "aop" (want member)
		    gen: function (this, vmcode) {
			vmcode.gen_push(this.second); // save rhs as argument

			// XXX eval children of RHS once???

			this.first.gen(vmcode);  // fetch lhs as variable
			vmcode.emit_binop(this.aop, this);
			this.first.gen_lhs(vmcode); // store in lhs
		    }
		}
	    });

	    p.add_assignop = function (name, id, aop) {
		var C = Class.new({
		    name: name,
		    supers: [p.AssignOp],
		    props: { aop: aop }
		});
		p.add_symbol_class(id, C);
	    };
	    p.add_assignop("AssignPlus",  "+=", "+");
	    p.add_assignop("AssignMinus", "-=", "-");

	    p.Ternary = Class.new({
		name: "Ternary",
		supers: [p.Symbol],
		methods: {
		    led: function (this, left) {
			this.first = left;
			this.second = p.expression(0);
			p.advance(":");
			this.third = p.expression(0);
			this.arity = "ternary";
			return(this);
		    },
		    gen: function (this, vmcode) {
			this.first.gen(vmcode); // condition
			var false_label = vmcode.def_fwd_label();
			vmcode.emit_ifnot(false_label, this);

			this.second.gen(vmcode); // true case
			var done_label = vmcode.def_fwd_label();
			vmcode.emit_jrst(done_label, this);

			vmcode.drop_fwd_label(false_label);
			this.third.gen(vmcode); // false case

			vmcode.drop_fwd_label(done_label);
		    }
		}, // methods
		props: {
		    lbp: p.PTERN
		}
	    });
	    p.add_symbol_class("?", p.Ternary);

	    p.AndIf = Class.new({
		name: "AndIf",
		supers: [p.InfixR],
		methods: {
		    gen: function (this, vmcode) {
			this.first.gen(vmcode);
			var done_label = vmcode.def_fwd_label();
			vmcode.emit_ifnot(done_label, this); // lhs false: quit
			this.second.gen(vmcode); // lhs true: eval rhs
			vmcode.drop_fwd_label(done_label);
		    }
		},
		props: {
		    lbp: p.PLAND
		}
	    });
	    p.add_symbol_class("&&", p.AndIf);

	    p.OrIf = Class.new({
		name: "OrIf",
		supers: [p.InfixR],
		methods: {
		    gen: function (this, vmcode) {
			this.first.gen(vmcode); // eval lhs
			var done_label = vmcode.def_fwd_label();
			vmcode.emit_iftrue(done_label, this); // lhs true: done
			this.second.gen(vmcode); // lhs false: eval rhs
			vmcode.drop_fwd_label(done_label);
		    }
		},
		props: {
		    lbp: p.PLOR
		}
	    });
	    p.add_symbol_class("||", p.OrIf);

	    // right associative
	    p.add_infix("Is",  "===", true, p.PCOMP);
	    p.add_infix("Isnt","!==", true, p.PCOMP);
	    p.add_infix("Eq",  "==",  true, p.PCOMP);
	    p.add_infix("NEq", "!=",  true, p.PCOMP);
	    p.add_infix("LT",  "<",   true, p.PCOMP);
	    p.add_infix("LEq", "<=",  true, p.PCOMP);
	    p.add_infix("GT",  ">",   true, p.PCOMP);
	    p.add_infix("GEq", ">=",  true, p.PCOMP);

	    p.add_infix("BOr", "|",   true, p.PBOR);

	    p.add_infix("BAnd", "&",  true, p.PBAND);

	    // left associative
	    p.add_infix("Plus", "+",  false, p.PADD);

	    p.Prefix = Class.new({
		name: "Prefix",
		supers: [p.Symbol],
		methods: {
		    nud: function (this) {
			p.reserve(this); // in case keyword
			this.first = p.expression(p.PPFX); // XXX member for rbp?
			this.arity = "unary";
			return(this);
		    },
		    gen_prefix: function (this, vmcode) {
			this.first.gen(vmcode);
			vmcode.emit_unop(this.value, this);
		    },
		    gen: function (this, vmcode) { // XXX call gen_xxx on arity?
			this.gen_prefix(vmcode);
		    }
		}
	    }); // Prefix

	    // minus is infix and prefix operator:
	    p.Minus = Class.new({
		name: "Minus",
		supers: [p.Infix, p.Prefix],
		methods: {
		    gen: function (this, vmcode) {
			if (this.arity == "unary") {
			    this.gen_prefix(vmcode);
			}
			else {
			    this.gen_infix(vmcode);
			}
		    } // gen
		}, // methods
		props: {
		    lbp: p.PSUB
		}
	    });
	    p.add_symbol_class("-", p.Minus);

	    // right associative
	    p.add_infix("Mult", "*",  true, p.PMUL);
	    p.add_infix("Div", "/",   true, p.PDIV);

	    p.Dot = Class.new({
		name: "Dot",
		supers: [p.Symbol],
		methods: {
		    led: function (this, left) {
			// XXX bring back exp.NAME( ternary as optimization
			//	(avoid creating BoundMethod)????
			this.lvalue = true;
			this.first = left;
			var t = p.ctoken();
			if (t.arity != "name") {
			    t.error("Expected a property name");
			}
			t.arity = "literal";
			this.second = t;
			this.arity = "binary";
			p.advance();
			return(this);
		    },
		    gen: function (this, vmcode) {
			this.first.gen(vmcode); // object
			// this.second ALWAYS Lit!
			vmcode.emit_binop_lit(this.value, this.second.value, this);
		    },
		    gen_lhs: function (this, vmcode) {
			vmcode.emit_push(this);	// save value to store as arg
			vmcode.emit_push_lit(this.second.value, this); // member
			this.first.gen(vmcode); // object
			vmcode.emit_lhsop(this.value, this);
		    }
		}, // methods
		props: {
		    lbp: p.PDOT
		}
	    });
	    p.add_symbol_class(".", p.Dot);

	    // superclass "." operator
	    p.DotDot = Class.new({
		name: "DotDot",
		supers: [p.Dot]
	    });
	    p.add_symbol_class("..", p.DotDot);

	    // only used for ...rest (so far)
	    p.DotDotDot = Class.new({
		name: "DotDotDot",
		supers: [p.Symbol]
	    });
	    p.add_symbol_class("...", p.DotDotDot);

	    p.LBrack = Class.new({
		name: "LBrack",
		supers: [p.Infix],
		methods: {
		    led: function (this, left) {
			this.first = left;
			this.second = p.expression(0);
			this.arity = "binary";
			this.lvalue = true;
			p.advance("]");
			return(this);
		    },
		    nud: function (this) {
			var a = [];
			while (!p.check("]")) {
			    a.append(p.expression(0));
			    if (!p.check("]")) {
				p.advance(",");
			    }
			}
			p.advance("]");
			this.first = a;
			this.arity = "unary";
			return(this);
		    },
		    gen: function (this, vmcode) {
			if (this.arity == "unary") {
			    vmcode.emit_new("List", this);
			    this.first.for_each(
				function (item) {
				    item.gen(vmcode); // list item
				    vmcode.emit_append(this);
				}
			    );
			    vmcode.emit_pop_temp(this); // from emit_new
			}
			else {
			    this.gen_infix(vmcode);
			}
		    },
		    gen_lhs: function (this, vmcode) {
			vmcode.emit_push(this); // value to store
			vmcode.gen_push(this.second); // index
			this.first.gen(vmcode); // container
			vmcode.emit_lhsop(this.value, this);
		    }
		}, // methods
		props: {
		    lbp: p.PIDX
		}
	    });
	    p.add_symbol_class("[", p.LBrack);

	    p.LParen = Class.new({
		name: "LParen",
		supers: [p.Infix],
		methods: {
		    nud: function (this) {	// (expr)
			var e = p.expression(0);
			p.advance(")");
			return(e);		// this node discarded
		    },
		    led: function (this, left) { // parse function call
			var a = [];
			var spread = false;
			if (!p.check(")")) {
			  leave_while:
			    while (true) {
				if (p.check("...")) {
				    var arg = p.ctoken();
				    p.advance();
				    arg.first = p.expression(0);
				    a.append(arg);
				    spread = true; // spread arguments used
				}
				else {
				    a.append(p.expression(0));
				}
				if (!p.check(",")) {
				    leave_while();
				}
				p.advance(",");
			    }
			}
			p.advance(")");
			this.arity = "binary";
			this.first = left;
			this.second = a; // actuals
			this.third = spread; // bool: spread args present
			// removed check that function is a variable
			return(this);
		    }, // led
		    gen: function (this, vmcode) {
			if (this.third) { // ...args present
			    // generate code for actuals, placing them on stack
			    this.second.each_for(
				function (actual) {
				    if (actual.check("...")) {
					vmcode.gen_push(actual.first);
				    }
				    else {
					vmcode.gen_push(actual);
				    }
				}
			    );

			    this.first.gen(vmcode); // function expression

			    // create vm.args list bit at a time...
			    vmcode.emit_clargs(this);
			    this.second.for_each(
				function (actual) {
				    if (actual.check("...")) {
					vmcode.emit_sprarg(this);
				    }
				    else {
					vmcode.emit_poparg(this);
				    }
				}
			    );
			    vmcode.emit_call0(this);
			} // ...args present
			else {
			    // generate code for actuals, placing them on stack
			    this.second.each_for(
				function (actual) {
				    vmcode.gen_push(actual);
				}
			    );

			    this.first.gen(vmcode); // function expression
			    vmcode.emit_call(this.second.len(), this);
			} // no ...args
		    } // gen
		}, // methods
		props: {
		    lbp: p.PFUN,
		    exp_stmt: true
		}
	    }); // LParen
	    p.add_symbol_class("(", p.LParen);

	    p.add_prefix("Not", "!");
	    p.add_prefix("BNot", "~");

	    p.Function = Class.new({
		name: "Function",
		supers: [p.Prefix],
		methods: {
		    nud: function (this) {
			var a = [];
			// XXX pass true for func. scope?
			p.scope = p.Scope.new(p.scope);

			// define read-only var for continuation
			// (without "shadow" warnings)
			p._defname_internal(this.where, "return", true);
			var t = p.ctoken();
			if (t.arity == "name") { // function NAME?
			    // NOTE!! name (currently) defined only
			    // INSIDE the function's scope, to allow
			    // recursive functions declared in hashes.
			    // Would need to make "function name ..." a legal
			    //	statement expr. (setting .exp_stmt)
			    //  to allow bare "function" outside of expression.
			    //  (would be moot point in pure expression language)
			    this.name = t.value;
			    p.define(t, true); // define function name R/O
			    p.advance();
			}
			p.advance("(");
			if (!p.check(")")) {
			    var last = false;
			  leave_while:
			    while (true) {
				if (p.check("...")) {
				    p.advance("...");
				    last = true;
				}
				t = p.ctoken();
				if (t.arity != "name") {
				    t.error("Expected a parameter name");
				}
				p.define(t); // define argument in scope
				if (!last) { // not ...args
				    a.append(t.value); // save formal name
				}
				else {
				    this.third = t.value; // ...formal name
				    p.advance();
				    leave_while();
				}
				p.advance();
				if (!p.check(",")) {
				    leave_while();
				}
				p.advance(",");
			    }
			}
			this.first = a;
			p.advance(")");
			p.advance("{");
			t = p.ctoken(); // t2?
			if (t.arity == "literal") {
			    // XXX check if Str??
			    this.doc = t.value; // XXX not visible xxl__tree
			    p.advance();
			}
			else {
			    this.doc = null;
			}
			this.second = p.statements();
			p.scope = p.scope.pop();
			p.advance("}");
			this.arity = "function";
			return(this);
		    },
		    gen: function (this, vmcode) {
			// generate VM code for function:
			var fcode = VMCode.new();
			// BEFORE ANY CALL/OP!! establish scope, pick up args
			if (this.third) { // have ...rest argument?
			    fcode.emit_args2(this.first, this.third, this);
			}
			else {
			    fcode.emit_args(this.first, this);
			}
			fcode.gen_stmts(this.second);
			// create closure (code pointer and current scope)
			vmcode.emit_close(fcode.finish(this), this);
		    }
		} // methods
	    });
	    p.add_symbol_class("function", p.Function);

	    //////////////// Statements

	    // XXX reserved = true
	    p.Stmt = Class.new({
		name: "Stmt",
		supers: [p.Symbol],
		methods: {
		    std: function (this) { this.error("Not a statement"); }
		}
	    });

	    // code block AND hash constructor
	    p.LBrace = Class.new({
		name: "LBrace",
		supers: [p.Stmt],
		methods: {
		    nud: function (this) { // { key: value .... }
			var a = [];
			var what; // undecided
			var n;	// name/key
			var v;	// value
		      leave_while:
			while (!p.check("}")) {
			    n = p.ctoken();
			    if (n.arity != "name"
				&& n.arity != "literal") {
				n.error(
				    (what ? what : "Set/Dict") +
				     " key must be name or number");
			    }
			    p.advance();
			    if (!what) {
				if (p.check(",") || p.check("}")) {
				    what = "Set";
				}
				else if (p.check(":")) {
				    what = "Dict";
				}
				else {
				    p.ctoken().error("syntax error");
				}
			    }
			    if (what == "Dict") {
				p.advance(":");
				n.first = p.expression(0);
			    }
			    a.append(n);
			    if (p.check("}")) {
				leave_while();
			    }
			    p.advance(",");
			}
			p.advance("}");
			this.first = a;
			this.second = what ? what : "Dict"; // {} is Dict
			this.arity = "unary";
			return(this);
		    }, // nud
		    std: function (this) { // { block }
			p.scope = p.Scope.new(p.scope);	 // before label defined
			if (this.second) { // label?
			    p.define(this.second, true); // read-only!
			}
			p.advance("{"); // must be AFTER label defined!
			this.first = p.statements();
			p.scope = p.scope.pop();
			p.advance("}");
			this.arity = "statement";
			return(this); // no longer discards LBrace stmt node!
		    },
		    gen: function (this, vmcode) {
			if (this.arity == "statement") { // { block }
			    var bcode = VMCode.new(); // block closure code
			    bcode.emit_scope(this.second, this);
			    bcode.gen_stmts(this.first);
			    // create block closure & invoke
			    vmcode.emit_bclose_call(bcode, this);
			}
			else {	// unary { attr: value ... } or { setitem ... }
			    vmcode.emit_new(this.second, this);
			    if (this.second == "Dict") {
				// first is list of lit/name keys,
				// each with a value expression on "first"
				this.first.for_each(
				    function (item) {
					// value to store
					vmcode.gen_push(item.first);
					// key
					vmcode.emit_push_lit(item.value, this);
					// get dict back in AC
					vmcode.emit_temp(this);
					vmcode.emit_lhsop("[", this);
				    }
				); // for_each
			    } // Dict
			    else { // Set
				this.first.for_each(
				    function (item) {
					vmcode.emit_push_lit(item.value, this);
					vmcode.emit_temp(this); // get Set in AC
					vmcode.emit_binop_lit(".", "add", this);
					vmcode.emit_call(1, this);
				    }
				);
			    } // Set
			    vmcode.emit_pop_temp(this); // leave Dict/Set in AC
			} // unary
		    } // gen
		} // methods
	    }); // LBrace
	    p.add_symbol_class("{", p.LBrace);

	    p.Var = Class.new({
		name: "Var",
		supers: [p.Stmt],
		methods: {
		    std: function (this) {
			var t;
			this.arity = "statement";
			var n = p.ctoken();
			if (n.arity != "name") {
			    n.error("Expected a new variable name");
			}
			if (n.reserved) {
			    n.error(n.value.repr() + " reserved");
			}
			var read_only = this.value == "const";
			p.define(n, read_only); // define variable
			this.first = n;
			p.advance(n.value); // consume variable name

			// "const" requires value!!
			if (p.check("=") || read_only) {
			    p.advance("=");
			    this.second = p.expression(0);
			}
			p.advance(";");
			return(this);
		    },
		    gen: function (this, vmcode) {
			vmcode.emit_var(this.first.value, this);
			if (this.second) {
			    this.second.gen(vmcode); // expr
			    vmcode.emit_store(this.first.value, this); // var
			}
		    } // gen
		}
	    }); // Var
	    p.add_symbol_class("var", p.Var);
	    p.add_symbol_class("const", p.Var);

	    p.If = Class.new({
		name: "If",
		supers: [p.Stmt],
		methods: {
		    std: function (this) {	// parse
			p.advance("(");
			this.first = p.expression(0);
			p.advance(")");
			this.second = p.block();

			// This will cause REPL to block for next token. Sorry!
			// node.js seems to avoid this, only continues
			// on "} else ...."  (could have a "peek"
			// which won't look across lines?)
			if (p.check("else")) { 
			    p.reserve();
			    p.advance("else");
			    // XXX change "else if" exception to "elif"?
			    this.third = (p.check("if") ?
					  p.statement() : p.block());
			}
			else {
			    this.third = null;
			}
			this.arity = "statement";
			return(this);
		    },
		    gen: function (this, vmcode) { // gen
			this.first.gen(vmcode); // condition
			var not_true_label = vmcode.def_fwd_label();
			vmcode.emit_ifnot(not_true_label, this);
			// gen_stmt? should be LBrace??:
			this.second.gen(vmcode);
			if (this.third) { // have else?
			    var end_label = vmcode.def_fwd_label();
			    vmcode.emit_jrst(end_label, this);
			    vmcode.drop_fwd_label(not_true_label);
			    // else stmt(s) [vmcode.gen_stmt?]:
			    this.third.gen(vmcode);
			    vmcode.drop_fwd_label(end_label);
			}
			else {
			    vmcode.drop_fwd_label(not_true_label);
			}
		    } // if.gen
		}
	    }); // If
	    p.add_symbol_class("if", p.If);

	    // parsed via peek-ahead in this.statement()
	    p.Label = Class.new({
		name: "Label",
		supers: [p.Stmt],
		methods: {
		    std: function (this) {	// parse
			var n = p.ctoken();
			if (n.arity != "name") {
			    n.error("Expected a label name");
			}
			if (n.reserved) {
			    n.error(n.value.repr() + " reserved.");
			}
			p.scope = p.Scope.new(p.scope);
			p.define(n, true); // define variable for label as R/O
			this.arity = "statement";
			this.first = n;
			p.advance();
			p.advance(":");
			this.second = p.statement(true); // recurse!
			p.scope = p.scope.pop();
			return(this);
		    },
		    gen: function (this, vmcode) { // gen
			// wrap entire statement in a closure w/ leave label
			var lcode = VMCode.new();
			lcode.emit_scope(this.first, this);
			this.second.gen(lcode); // vmcode.gen_stmt?
			// create block closure and invoke
			vmcode.emit_bclose_call(lcode, this);
		    } // label.gen
		}
	    }); // Label
	    // NOTE! not a keyword!

	    p.While = Class.new({
		name: "While",
		supers: [p.Stmt],
		methods: {
		    std: function (this) {	// parse
			p.advance("(");
			this.first = p.expression(0);
			p.advance(")");
			this.second = p.block();
			this.arity = "statement";
			return(this);
		    },
		    gen: function (this, vmcode) { // gen
			// generate closure for body, w/ leave label, if any
			var leave_sym = this.second.second;
			var wcode = VMCode.new(); // code for block closure
			wcode.emit_scope(leave_sym, this);
			var top_branch_label = wcode.get_off();
			this.first.gen(wcode); // condition
			var done_branch_label = wcode.def_fwd_label();
			wcode.emit_ifnot(done_branch_label, this);
			this.second.gen(wcode);
			wcode.emit_jrst(top_branch_label, this);
			wcode.drop_fwd_label(done_branch_label);

			// create closure around entire while stmt and invoke
			vmcode.emit_bclose_call(wcode, this);
		    }
		}
	    }); // p.while
	    p.add_symbol_class("while", p.While);
	}, // Parser.init()

	// XXX move to PrattParser?
	add_terminal: function (this_parser, name, id, super) {
	    var C = Class.new({
		name: name,
		supers: [super || this_parser.Symbol]
	    });
	    this_parser.add_symbol_class(id, C);
	    return(C);
	}, // add_terminal

	// XXX move to PrattParser?
	add_infix: function(this_parser, name, id, right, lbp) {
	    // helper to generate simple infix Symbol classes
	    var C = Class.new({
		name: name,
		supers: [right ? this_parser.InfixR : this_parser.Infix],
		props: { lbp: lbp }
	    });
	    this_parser.add_symbol_class(id, C);
	},

	// XXX move to PrattParser?
	add_prefix: function (this_parser, name, id) {
	    // helper to generate simple prefix Symbol classes
	    var C = Class.new({
		name: name,
		supers: [this_parser.Prefix]
	    });
	    this_parser.add_symbol_class(id, C);
	},

	statements: function (this) {
	    """
	    Parse a series of statements, returning List.
	    Called for function body, block, whole file compile.
	    """
	    var a = [];
	    while (!this.check_end_block()) {
		a.append(this.statement());
	    }
	    return(a);
	}, // statements

	block: function (this) { // [LABEL ":"] "{" STATEMENTS "}"
	    var label;
	    var t = this.ctoken();
	    if (t.arity == "name") { // label name?
		label = t;	     // save it
		this.advance();
		this.advance(":");
		t = this.ctoken();
	    }

	    // was advance, but reads first token in block,
	    // (and if it was a reference to the label on the block,
	    // it would come up undefined), so advance moved to LBrace.std
	    this.check("{");
	    t.second = label;	// attach label (if any) to LBrace
	    return(t.std());
	},
	start_parse: function (this, fname) { // get ready to parse
	    // parens, brackets and braces are non-combining.
	    // tempting to allow braces, but would require '{ }' for empty Dict!
	    // (unless they only combined with their own kind '{{' and '}}')
	    var oprs = '!@#$%^&*-=+<>\|:,./?~';
	    // was: '=<>!+-*&|/%^.', '=<>&|.'
	    this..start_parse(fname, oprs, oprs);

	    // set in root_scope by classes.py classes_init()
	    this.predef("Class");
	    this.predef("__xxl");
	    this.predef("null", true);	// read-only
	    this.predef("true", true);	// read-only
	    this.predef("false", true); // read-only
	    this.predef("undefined", true); // read-only

	    // set by new_module in classes.py
	    this.predef("__modinfo");
	},

	parse: function (this, fname) {	// parse whole file
	    this.start_parse(fname);
	    // parse & execute statements one at a time (for extensions)
	    // save as a series of calls to closures???
	    var s = this.statements();
	    this.advance(this.END);
	    this.scope = this.scope.pop();
	    return(s);		// return list of statement ASTs
	},

	reset: function (this) {
	    """
	    here when interactive parse failed
	    """
	    this.reset_prompt();
	    this.reset_tokenizer();
	    this._token = this._next_token = null;
	    this.need_advance = true;
	}
    } // Parser methods
});

////////////////
// move to compile.xxl?
//	(regression test will need to do "-P x.vmx")
//
// main program to compile an XXL file, return VMX (VM metadata and code) JSON
// for regression testing, creating .vmx files (parser.vmx, bootstrap.vmx)

// NOTE!
//	compiling test programs to a .vmx file w/
//	"./xxl.py parser.xxl foo.xxl > foo.vmx"
//	and running it w/ "xxl.py -t -x foo.vmx args ...."
//	traces JUST the execution of your program,
//	since the parser (parse_and_execute) is not run.
//
//	And makes it easier to set breakpoints in the VM
//	(again, since the compiler isn't being invoked)
//	although you can always call __xxl.break in your program.

var gen = function (stmts) {	// tree is list of top level stmts/exprs
    var vmcode = VMCode.new();
    vmcode.gen_stmts(stmts);
    return(vmcode.finish(null)); // emit final return
}; // gen()

var dump_parser = function (p) {
    p.symbol_classes.items().for_each(
	function (pair) {
	    var c = pair[1];
	    var i = c.new("foo", "bar", "baz");
	    __xxl.print(pair[0], // dict key
			 c.name,  // Symbol class name
			 i.lbp,
			 // won't see inherited methods;
			 // looking at Instance sees Symbol.nud
			 (c.__methods['nud'] && "value") || "-",
			 (i.std && "stmt") || "-"
			);
	}
    );
    __xxl.exit(1);
};

var compile = function (fname, output) {
    """
    Compile code in file `fname`.
    Returns List of Str.
    Optional `output` determines format:
	'ast': string with JSON string for AST
	default: list[0]: JSON metadata
		 list[0]: JSON code
    """
    var p = Parser.new();

    // get list of abstract syntax trees (of Symbols)
    // (one per statement)
    var asts = p.parse(fname);

    if (output == "ast") {
	var j = __xxl._tree(asts); // returns big JSON string
	return([j]);
    }

    // generate VM code (as List of instruction Lists)
    var code = gen(asts);

    // create metadata line:
    var py_os = __xxl.pyimport("os");
    var py_json = __xxl.pyimport("json");
    var stat = py_os.stat(fname);
    // wanted "at" & compilation time, but breaks regression test!
    //	XXX maybe they should ignore first line?
    //		depends on Python 3.6 dict ordering!!!! hand format?!
    var d = {v: 1.0,
	     fn: fname,
	     mt: stat.st_mtime,
	     sz: stat.st_size};
    var meta_json = py_json.dumps(d);

    // get code as JSON string
    // XXX maybe option to serialize in a format
    //	that loads faster than JSON????
    var code_json = __xxl._vtree(code, fname);
    return([meta_json, code_json]);
}; // compile

if (__modinfo.main) {
    // here when run as: ./xxl.py parser.xxl sourcefile
    // OR: ./xxl.py parser.vmx sourcefile
    var output = "vmx";
    var i = 0;
    var usage = function () {
	__xxl.error("Usage: parser [--ast] SOURCEFILE");
	__xxl.exit(1);
    };

    var argc = __xxl.argv.len();
    while (i < argc && __xxl.argv[i].starts_with('-')) {
	var option = __xxl.argv[i];
	if (option == "--ast") {
	    output = "ast";
	}
	else if (option == "--dump") {
	    var p = Parser.new();
	    dump_parser(p);
	    __xxl.exit(0);
	}
	else {
	    usage();
	}
	i += 1;
    }
    if (i == argc) {
	usage();
    }
    var ret = compile(__xxl.argv[i], output);
    ret.for_each(__xxl.print);
    // no __xxl.exit, so stats visible w/o catching SystemExit Exception
} // main
